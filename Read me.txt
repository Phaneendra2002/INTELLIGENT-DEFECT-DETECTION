Running the YOLOv8 Dataset Preparation and Training Code

This document explains how to run the two scripts provided for YOLOv8 dataset preparation, model training, and inference.


Overview

This project provides two Python scripts that:

Prepare datasets for YOLOv8 training by splitting images and labels into train, validation, and test sets.
Train a YOLOv8 model using the prepared dataset.
Enhance YOLOv8 with a Swin Transformer backbone for improved object detection performance.


Dataset Source:
The dataset used is from Kaggle:
https://www.kaggle.com/datasets/nomihsa965/large-scale-image-dataset-of-wood-surface-defects


Prerequisites

Before running the code, install the following libraries:

ultralytics 
albumentations 
timm 
torch 
torchvision 
scikit-learn 
pyyaml


How to Run the Code

Step 1: Prepare the Dataset
	The dataset is available in the zip file but the dataset is also in the folders with yolov8 and yolov8 with swin model

Step 2: Run the Script for Dataset Preparation and YOLOv8 Training

A)Run the Script:
	Execute the script (CODE.py) to:

	Split the dataset into train, validation, and test subsets.
	Save the splits in the yolo_dataset/ directory with the following structure
	Generate a data.yaml file containing the paths and class information.

B)Start YOLOv8 Training:
	The script will automatically begin training YOLOv8 using the prepared dataset.
	Trained model weights will be saved in the runs directory upon completion.

Step 3:Run the Script for Dataset Preparation and YOLOv8 with Swin Transformer

A)Run the Script:
	Execute the script (CODE.py) again to:
	Prepare the dataset (same as above).
	Train the YOLOv8 model with a Swin Transformer backbone for enhanced performance.

B) Outputs:
	Trained weights and results will be saved in the runs directory.
	The Swin Transformer-enhanced YOLOv8 model will use advanced data augmentation techniques during training.


Quality Assurance and Evaluation

After running the script, evaluation metrics such as mAP, precision, and recall can be found in the runs folder.
Test images with predictions and bounding boxes are also saved in the runs directory for visual inspection